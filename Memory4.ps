%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 595 842
%%Title: Memory
%%Pages: 3
%%BeginProlog

/anz 6 def

/grid {
 0.02 setlinewidth
 0.5 dup dup setrgbcolor
 0 0 0 1 1 0 1 1 4 {0.02 0 360 arc fill} repeat
} def

/paint{
0.05 0.05 0.45 0.9 0.5 0.05 0.45 0.9 8 index
dup 0 eq {pop 1 0 0 0 setcmykcolor rectfill 1 0 0 0 setcmykcolor rectfill} if
dup 1 eq {pop 0 1 0 0 setcmykcolor rectfill 1 0 0 0 setcmykcolor rectfill} if
dup 2 eq {pop 0 1 0 0 setcmykcolor rectfill 0 1 0 0 setcmykcolor rectfill} if
dup 3 eq {pop 0 0 1 0 setcmykcolor rectfill 0 1 0 0 setcmykcolor rectfill} if
dup 4 eq {pop 0 0 1 0 setcmykcolor rectfill 0 0 1 0 setcmykcolor rectfill} if
dup 5 eq {pop 1 0 0 0 setcmykcolor rectfill 0 0 1 0 setcmykcolor rectfill} if
pop
} def

/draw{
0.1 setlinewidth
0 0 0 setrgbcolor
dup 0 eq {0.2 0.2 moveto 0.8 0.8 lineto stroke 0.2 0.8 moveto 0.8 0.2 lineto stroke} if
dup 1 eq {0.5 0.5 0.3 0 360 arc stroke} if
dup 2 eq {0.2 0.2 moveto 0.8 0.2 lineto 0.5 0.8 lineto closepath stroke} if
dup 3 eq {gsave 0.5 0.5 translate 6 {0 0 moveto 0.3 0 lineto stroke 60 rotate} repeat grestore} if
dup 4 eq {0.65 0.65 0.15 -35 180 arc 0.35 0.65 0.15 0 215 arc 0.5 0.2 lineto closepath stroke} if
dup 5 eq {gsave 0.5 0.5 translate 0.1 0.1 moveto 4 {0.3 0.1 lineto 0.3 -0.1 lineto 0.1 -0.1 lineto -90 rotate} repeat closepath stroke grestore} if
dup 6 eq {0.5 0.5 0.3 210 330 arc stroke 0.6 0.8 moveto 0.6 0.6 lineto stroke 0.4 0.8 moveto 0.4 0.6 lineto stroke} if
pop
} def

%%EndProlog

%%Page: 1 1
%5 5 translate
595 anz div dup scale
1 setlinejoin
1 setlinecap

%paint
0 1 anz {
0 1 anz 1 sub {
gsave dup 2 index add anz mod 2 index translate grid
dup paint               %%%
grestore pop}for pop}for

%draw
0 1 anz 1 sub {
gsave dup anz 2 mul 1 index 2 mul add 1 add anz 1 add mod translate grid
dup draw                   %%%
grestore pop}for
0 1 anz 1 sub{
0 1 anz 1 sub {
gsave dup 2 index 2 index 2 mul add anz 1 add mod translate grid
anz 2 index sub 1 sub draw        %%%
grestore pop}for pop}for

showpage

%%Page: 2 2
595 anz div dup scale
1 setlinejoin
1 setlinecap

%paint
0 1 anz 1 sub {
gsave dup 0 translate grid
anz 1 sub 1 index sub paint %%%
grestore pop}for
1 1 anz{
0 1 anz 1 sub {
gsave dup 2 index translate grid
1 index 1 sub paint        %%%
grestore pop}for pop}for

%draw
0 1 anz {
0 1 anz 1 sub {
gsave dup 2 index translate grid
anz 1 sub 1 index sub draw  %%%
grestore pop}for pop}for


showpage

%%Page: 3 3
595 21 div dup scale

/Helvetica 1.5 selectfont
1 26.5 moveto (D) show 
(D) stringwidth pop
/Helvetica 1 selectfont
1 add 26.5 moveto (OPPELMEMORY) show 
/Helvetica 0.6 selectfont
1 25.5 moveto (Fuer alle, die sich nicht lange merken koennen, welche Karte wo lag.) show 

/Helvetica 1 selectfont
1 23 moveto (Bastelanleitung:) show
/Helvetica 0.8 selectfont
1 22 moveto (- Festes Papier nehmen (sonst kann man schummeln)) show
1 21 moveto (- Beidseitig bedrucken, ausschneiden, fertig.) show

/Helvetica 1 selectfont
1 19 moveto (Spielanleitung:) show 
/Helvetica 0.8 selectfont
1 18 moveto (- Karten ausbreiten, egal wie rum.) show 
1 17 moveto (- Reihum zwei Karten umdrehen,) show 
1 16 moveto (- Wenn sie die gleiche Zeichenkombination haben:) show 
1 15 moveto (    Paerchen einsacken, nochmaaal.) show
/Helvetica 0.6 selectfont
1 14.2 moveto (     (Karten muessen nicht gleichrum gelegen haben)) show
/Helvetica 0.8 selectfont
1 13 moveto (- Sonst: liegen lassen. Naechster ist dran.) show 
/Helvetica 0.6 selectfont
1 12.2 moveto (     (Karten nicht zurueckdrehen!)) show
/Helvetica 0.8 selectfont
1 11 moveto (- Gewinner ist der mit den meisten Paerchen.) show
1 10 moveto (- Spiel-Alternative: Farben statt Zeichen,) show
1  9 moveto (    aber beides gleichzeitig geht nicht.) show
/Helvetica 0.6 selectfont
1  8.2 moveto (   (Das ist, damit nicht immer Paerchen nebeneinander liegen.)) show

15  1 moveto (Viel Spass! - Rafael) show
showpage